module MathModelling_Timo_Rasenberg exposing (..)


type Function = X
              | Const Int
              | Plus Function Function
              | Minus Function Function
              | Mult Function Function
              | Div Function Function
              | Poly Function Int


print: Function -> String
print f = 
    case f of
        X -> "x"
        Const x -> String.fromInt x
        Plus x y -> "(" ++ print x ++ " + " ++ print y ++ ")"
        Minus x y -> "(" ++ print x ++ " - " ++ print y ++ ")"
        Mult x y -> "(" ++ print x ++ " * " ++ print y ++ ")"
        Div x y -> "(" ++ print x ++ " / " ++ print y ++ ")"
        Poly x y -> "(" ++ print x ++ " ^ " ++ String.fromInt y ++ ")"


eval: Float -> Function -> Float
eval a f =
    case f of
        X -> a
        Const x -> toFloat x
        Plus x y -> (eval a x) + (eval a y)
        Minus x y -> (eval a x) - (eval a y)
        Mult x y -> (eval a x) * (eval a y)
        Div x y -> (eval a x) / (eval a y)
        Poly x y -> (eval a x) ^ (toFloat y)


plotYLine: Int -> Int -> Float -> String
plotYLine y_min y_max val = 
    let
        y_diff = y_max - y_min
        -- Clamp the value `val` between the `y_min` and `y_max` with calls of
        -- `min` and `max`.
        stars = min (max (truncate val) y_min) y_max + abs y_min
    in
        String.repeat stars "*" ++ String.repeat (y_diff - stars) "-"


graph: Function -> Int -> Int -> Int -> Int -> String
graph f x_min x_max y_min y_max =
    let
        x_axis = List.map toFloat (List.range x_min (x_max - 1))
        y_lines = List.map (\a -> plotYLine y_min y_max (eval a f)) x_axis
    in
        String.join "\n" y_lines


g: Function
g = 
    (Plus 
        (Mult 
            (Plus 
                (Const 3) 
                X
            ) 
            (Minus 
                X 
                (Poly 
                    X
                    5
                )
            )
        ) 
        (Const 2)
    )


h: Function
h = 
    (Plus
        (Minus
            (Poly
                (Minus
                    (Div
                        X
                        (Const 5)
                    )
                    (Const 1)
                )
                4
            )
            (Poly 
                (Plus 
                    (Div
                        X 
                        (Const -2)
                    ) 
                    (Const 2)
                ) 
                2
            )
        ) 
        (Const 6)
    )


k: Function
k =
    (Plus
        (Const 4)
        (Minus
            (Poly
                (Div
                    X
                    (Const 3)
                )
                5
            )
            (Div
                X
                (Const 2)
            )
        )
    )


printTestA: Bool
printTestA = print g == "(((3 + x) * (x - (x ^ 5))) + 2)"


printTestB: Bool
printTestB = print h == "(((((x / 5) - 1) ^ 4) - (((x / -2) + 2) ^ 2)) + 6)"


printTestC: Bool
printTestC = print k == "(4 + (((x / 3) ^ 5) - (x / 2)))"


evalTestA: Bool
evalTestA = eval 2 g == -148


evalTestB: Bool
evalTestB = eval 4 h == 6.0016


evalTestC: Bool
evalTestC = eval 28 k == 70814.55967078192


graphTestA: Bool
graphTestA =
    graph g -10 20 -10 10
    ==
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "************--------\n" ++
    "********************\n" ++
    "************--------\n" ++
    "************--------\n" ++
    "************--------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------\n" ++
    "--------------------"


graphTestB: Bool
graphTestB = 
    graph h -10 20 -10 10
    ==
    "********************\n" ++
    "********************\n" ++
    "********************\n" ++ 
    "******************--\n" ++
    "**************------\n" ++
    "***********---------\n" ++ 
    "**********----------\n" ++
    "**********----------\n" ++
    "**********----------\n" ++
    "***********---------\n" ++
    "*************-------\n" ++
    "**************------\n" ++
    "***************-----\n" ++
    "***************-----\n" ++
    "****************----\n" ++
    "***************-----\n" ++
    "***************-----\n" ++
    "*************-------\n" ++
    "************--------\n" ++
    "**********----------\n" ++
    "********------------\n" ++
    "******--------------\n" ++
    "****----------------\n" ++
    "***-----------------\n" ++
    "**------------------\n" ++
    "**------------------\n" ++
    "****----------------\n" ++
    "*******-------------\n" ++
    "************--------\n" ++
    "********************"


graphTestC: Bool
graphTestC =
    graph k -15 15 -20 20
    ==
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "----------------------------------------\n" ++
    "**************--------------------------\n" ++
    "*********************-------------------\n" ++
    "************************----------------\n" ++
    "************************----------------\n" ++
    "************************----------------\n" ++
    "************************----------------\n" ++
    "***********************-----------------\n" ++
    "***********************-----------------\n" ++
    "***********************-----------------\n" ++
    "**************************--------------\n" ++
    "**********************************------\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************\n" ++
    "****************************************"


testAll: List Bool
testAll = [printTestA, printTestB, printTestC, evalTestA, evalTestB, evalTestC,
            graphTestA, graphTestB, graphTestC]